# Train the ML Model for the first time or whenever
# there is code refactoring but no data changes.

name: Train ML Model

on:
  pull_request:
    branches:
      - develop
      - feature*
    paths:
      - 'main.py'
      - 'config.yml'
      - 'steps/*.py'
      - 'requirements.txt'
      - 'trigger_training.py'
  workflow_dispatch:
    inputs:
      confirm:
        description: "Do you really want to proceed? (y/n)?"
        required: true
        default: 'n'
        type: choice
        options:
          - 'y'
          - 'n'

permissions:
  contents: write

env:
  ML_ARTEFACTS_S3: s3://ce7-grp-1-bucket/DVC_artefacts/
  ML_NEW_DATA_S3: s3://ce7-grp-1-bucket/new_ML_data/
  GIT_USERNAME: lcchua
  GIT_USEREMAIL: laichwang@gmail.com

jobs:
  pre-deploy:
    runs-on: ubuntu-latest
    steps:
      - run: echo "This job is automatically triggered by a ${{ github.event_name }} event."
      
  ML-Model-Training:
    name: Train or Retrain ML Model
    runs-on: ubuntu-latest
    environment: nonprod
    needs: [pre-deploy]
    if: ${{ github.event_name == 'workflow_dispatch' &&  github.event.inputs.confirm == 'y' }} || ${{ github.event_name == 'pull_request' && github.event.pull_request.merged == true }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12" # Specify the required Python version

      - name: Create Python ML venv
        run: | 
          python3 -m venv venv
          echo "PATH=$(pwd)/venv/bin:$PATH" >> $GITHUB_ENV

      - name: Install packages and dependencies
        run: | # inclusive of dvc[s3] install
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Configure Git
        run: |
          git config --global user.name ${{ env.GIT_USERNAME }}
          git config --global user.email ${{ env.GIT_USEREMAIL }}

    # To intialise dvc tracking if and only if it has not been set up for
    # the first-time already
      - name: First-time initialise DVC only
        run: |
          if ! test -d .dvc; then
            dvc init
            git commit -m "initialise dvc tracking"
            git push
          fi

    # Last-committed datasets are saved in S3 'dvc_artefacts' folder for download
      - name: Pull from DVC
        run: |
          if [[ -f "data/train.csv.dvc" && -f "data/test.csv.dvc" ]]; then 
            dvc pull data/train.csv data/test.csv
          fi

    # Latest new datasets are placed in S3 'new_datasets' folder,
    # if new datasets exist then overide the dvc-pulled datasets
      - name: Pull datasets from S3
        run: aws s3 cp ${{ env.ML_NEW_DATA_S3 }} data/ --quiet --recursive

      - name: Train the prediction model
        run: python3 main.py
              
      - name: Test the trained model
        run: python3 -m pytest

    # If are to add ML model scanning, then insert the action step here 

      - name: Fetch all tags to get the latest
        id: get_latest_tag
        run: |
          git fetch --tags
          echo "LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)" >> "$GITHUB_OUTPUT"
          echo "LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)"

      - name: Version ML and Git artefacts
        run: |
          dvc add data/train.csv && echo "CP1"
          dvc add data/test.csv && echo "CP2"
          git add data/train.csv.dvc data/.gitignore && echo "CP3"
          git add data/test.csv.dvc data/.gitignore && echo "CP4"
          git commit -m "add tracking of new training and testing data ${{ steps.get_latest_tag.outputs.LATEST_TAG }}" && echo "CP5"
          dvc add models/model.pkl && echo "CP6"
          git add models/model.pkl.dvc models/.gitignore && echo "CP7"
          git commit -m "add tracking of new trained model ${{ steps.get_latest_tag.outputs.LATEST_TAG }}" && echo "CP8"
          dvc remote add -d -f remote ${{ env.ML_ARTEFACTS_S3 }} && echo "CP9"
          dvc push && echo "CP10"
          git commit -a -m "update new dvc configurations" && echo "CP11"
          git push origin main && echo "CP12"

  call-workflow:
    needs: [pre-deploy, ML-Model-Training]
    if: ${{ needs.ML-Model-Training.result == 'success' }}
    uses: lcchua/mlops-project/.github/workflows/build_fastapi_app.yml@main
    with:
      skip_confirmation: 'true'
    secrets: inherit
