# This workflow will build and push a new container image to Amazon ECR:
#  - Previous docker push step: docker push ${{ env.AWS_ECR_name }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}.${{ github.run_number }}

name: Build Docker App Image

on:
  #pull_request:
  #  types: [closed]
  #  branches: [ "main" ]
  #  paths:
  #    - 'app.py'
  #    - 'dockerfile'
  #    - 'requirements.txt'
  #workflow_run:
  #  workflows: ["ML Model Training"]
  #  types: [completed]
  workflow_dispatch:
    inputs:
      confirm:
        description: "Do you want to proceed? (y/n)"
        required: true
        default: n
        type: choice
        options:
          - 'y'
          - 'n'
  workflow_call:
    inputs:
      skip_confirmation:
        required: true
        type: string

jobs:
  pre-deploy:
    runs-on: ubuntu-latest
    steps:
      - run: echo "This job is automatically triggered by a ${{ github.event_name }} event."

  Build-and-Push:
    # Build the trained model into FastAPI Docker Image and Push Image to registry
    name: Build and Push
    #if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    environment: development
    if: ${{ github.event_name == 'workflow_dispatch' &&  github.event.inputs.confirm == 'y' }} || ${{ github.event_name == 'workflow_call' && inputs.skip_confirmation == 'true' }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12" # Specify the required Python version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install DVC
        run: |
          pip install dvc[s3]

      # Only pull from DVC the last-commited ML model if 
      # there is no model already exisiting locally in the event
      # of 'workflow_dispatch' trigger - manual workkflow case
      - name: Pull from DVC
        run: |
          if [[ -f "models/model.pkl.dvc" && -f "models/model.pkl" ]]; then
            echo "A Ml Model is already existing in the 'models' sub-directory!" 
          elif [[ -f "models/model.pkl" ]]; then
            echo "A Ml Model is already existing in the 'models' sub-directory!"
          else
            dvc pull models/model.pkl
          fi

      - name: Fetch all tags to get the latest
        id: get_latest_tag
        run: |
          git fetch --tags
          echo "LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)" >> "$GITHUB_OUTPUT"
          echo "LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)"
          
      - name: Display latest tag
        run: echo "The latest tag is ${{ steps.get_latest_tag.outputs.LATEST_TAG }}"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push the image
        id: build-image
        env:
          ECR_REPO_NAME: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME: ${{ vars.NONPROD_IMAGE_NAME }}
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ steps.get_latest_tag.outputs.LATEST_TAG }}.${{ github.run_number }} -t ${{ env.IMAGE_NAME }}:latest .
          docker tag ${{ env.IMAGE_NAME }}:${{ steps.get_latest_tag.outputs.LATEST_TAG }}.${{ github.run_number }} ${{ env.ECR_REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ steps.get_latest_tag.outputs.LATEST_TAG }}.${{ github.run_number }}
          docker tag ${{ env.IMAGE_NAME }}:latest ${{ env.ECR_REPO_NAME }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.ECR_REPO_NAME }}/${{ env.IMAGE_NAME }} --all-tags
          echo "REG_IMAGE_NAME=${{ env.ECR_REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ steps.get_latest_tag.outputs.LATEST_TAG }}.${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Display Image Name
        run: echo "The built image name is ${{ steps.build-image.outputs.REG_IMAGE_NAME }}"

