# This workflow will build and push a new container image to Amazon ECR:
name: Build Docker App Image

on:
# Condition 1: Whenever the app source files changes, run build_fastapi_app to 
# rebuild docker image even though the ml model .pkl file has not changed.
#  pull_request:
#    types: [closed]
#    branches:
#      - develop
#    paths:
#      - 'app.py'
#      - 'dockerfile'
#      - 'requirements.txt'
# Condition 2: In case of having to run build_fastapi_app without train_model having ran.
  workflow_dispatch:
    inputs:
      confirm:
        description: "Do you really want to proceed? (y/n)?"
        required: true
        default: 'n'
        type: choice
        options:
          - 'y'
          - 'n'
# Condition 3: Whenver train_model runs, build_fastapi_app also be run.
  workflow_call:
    inputs:
      skip_confirmation:
        required: true
        type: string

permissions:
          contents: write

jobs:
  pre-deploy:
    runs-on: ubuntu-latest
    steps:
      - run: echo "This job is automatically triggered by a ${{ github.event_name }} event."

  Build-and-Push:
    # Build the trained model into FastAPI Docker Image and Push Image to registry
    name: Build and Push
    runs-on: ubuntu-latest
    environment: development
    if: ${{ github.event_name == 'workflow_dispatch' &&  github.event.inputs.confirm == 'y' }} || ${{ github.event_name == 'workflow_call' && inputs.skip_confirmation == 'true' }} || ${{ github.event.pull_request.merged }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          # Ensure full repo is cloned
          fetch-depth: 0

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12" # Specify the required Python version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install DVC
        run: pip install dvc[all]

      - name: Configure Git
        env:
          GIT_USERNAME: lcchua
          GIT_USEREMAIL: laichwang@gmail.com
        run: |
          git config --global user.name ${{ env.GIT_USERNAME }}
          git config --global user.email ${{ env.GIT_USEREMAIL }}

      # Only pull from DVC the last-commited ML model if 
      # there is no model already exisiting locally in the event
      # of 'workflow_dispatch' trigger - manual workkflow case
      - name: Pull from DVC
        run: |
          if [[ -f "models/model.pkl.dvc" && -f "models/model.pkl" ]]; then
            echo "A ML Model is already existing in the 'models' sub-directory!" 
          elif [[ -f "models/model.pkl" ]]; then
            echo "A ML Model is already existing in the 'models' sub-directory!"
          else
            dvc pull models/model.pkl
          fi

      - name: Fetch all tags to get the latest
        id: get_latest_tag
        run: |
          git fetch --tags
          echo "LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)" >> "$GITHUB_OUTPUT"
          echo "LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)"
      - name: Display latest tag
        run: echo "The latest tag is ${{ steps.get_latest_tag.outputs.LATEST_TAG }}"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        id: build-image
        env:
          REG_NAME: ${{ steps.login-ecr.outputs.registry }}
          VER_TAG: ${{ steps.get_latest_tag.outputs.LATEST_TAG }}
        run: | # The `aws ecr batch-delete-image` command is to untag the latest
          aws ecr batch-delete-image --repository ${{ vars.NONPROD_IMAGE_NAME }} --image-ids imageTag=latest
          docker build -t ${{ vars.NONPROD_IMAGE_NAME }}:${{ env.VER_TAG }}.${{ github.run_number }} \
          -t ${{ vars.NONPROD_IMAGE_NAME }}:latest .
          docker tag ${{ vars.NONPROD_IMAGE_NAME }}:${{ env.VER_TAG }}.${{ github.run_number }} \
          ${{ env.REG_NAME }}/${{ vars.NONPROD_IMAGE_NAME }}:${{ env.VER_TAG }}.${{ github.run_number }}
          docker tag ${{ vars.NONPROD_IMAGE_NAME }}:latest \
          ${{ env.REG_NAME }}/${{ vars.NONPROD_IMAGE_NAME }}:latest

      # Snyk scan the Docker image
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Run Snyk Container Scan 
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk container test ${{ vars.NONPROD_IMAGE_NAME }}:latest --severity-threshold=critical --file=./dockerfile
          snyk container test ${{ vars.NONPROD_IMAGE_NAME }}:latest --severity-threshold=critical --file=./dockerfile --json > snyk_container_report.json
        continue-on-error: true
      - name: Upload Snyk Container Report
        uses: actions/upload-artifact@v4.3.0
        with:
          name: snyk-container-report
          path: snyk_container_report.json

      - name: Push image to ECR
        env:
          REG_NAME: ${{ steps.login-ecr.outputs.registry }}
          VER_TAG: ${{ steps.get_latest_tag.outputs.LATEST_TAG }}
        run: |
          docker push ${{ env.REG_NAME }}/${{ vars.NONPROD_IMAGE_NAME }} --all-tags
          echo "REG_IMAGE_NAME=${{ env.REG_NAME }}/${{ vars.NONPROD_IMAGE_NAME }}:${{ env.VER_TAG }}.${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Display Image Name
        run: echo "The built image name is ${{ steps.build-image.outputs.REG_IMAGE_NAME }}"

