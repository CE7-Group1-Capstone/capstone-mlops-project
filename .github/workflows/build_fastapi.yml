# This workflow will build and push a new container image to Amazon ECR:
#  - Previous docker push step: docker push ${{ env.AWS_ECR_name }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}.${{ github.run_number }}

name: Docker Build App Image

on:
  #pull_request:
  #  types: [closed]
  #  branches: [ "main" ]
  #  paths:
  #    - 'app.py'
  #    - 'dockerfile'
  #    - 'requirements.txt'
  #workflow_run:
  #  workflows: ["Train ML Model"]
  #  types: [completed]
  workflow_dispatch:

jobs:
  Build:
    # Build the trained model into FastAPI Docker Image and Push Image to registry
    name: Build & Push
    #if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12" # Specify the required Python version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install DVC
        run: |
          pip install dvc[s3]

      - name: Pull from DVC
        run: dvc pull models/model.pkl

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fetch all tags to get the latest
        id: get_latest_tag
        run: |
          git fetch --tags
          echo "LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)" >> "$GITHUB_OUTPUT"
          echo "LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)"
          
      - name: Display latest tag
        run: echo "The latest tag is ${{ steps.get_latest_tag.outputs.LATEST_TAG }}"

      - name: Build and push the image
        id: build-image
        env:
          ECR_REPO_APPNAME: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME: predict-buy-app
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ steps.get_latest_tag.outputs.LATEST_TAG }}.${{ github.run_number }} -t ${{ env.IMAGE_NAME }}:latest .
          docker tag ${{ env.IMAGE_NAME }}:${{ steps.get_latest_tag.outputs.LATEST_TAG }}.${{ github.run_number }} ${{ env.ECR_REPO_APPNAME }}/${{ env.IMAGE_NAME }}:${{ steps.get_latest_tag.outputs.LATEST_TAG }}.${{ github.run_number }}
          docker tag ${{ env.IMAGE_NAME }}:latest ${{ env.ECR_REPO_APPNAME }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.ECR_REPO_APPNAME }}/${{ env.IMAGE_NAME }} --all-tags
          echo "REG_IMAGE_NAME=${{ env.ECR_REPO_APPNAME }}/${{ env.IMAGE_NAME }}:${{ steps.get_latest_tag.outputs.LATEST_TAG }}.${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Display Image Name
        run: echo "The built image name is ${{ steps.build-image.outputs.REG_IMAGE_NAME }}"
#---------------------------------------
# This is kept for future reference:
# ECR Private Repo Login
#- name: Login to Amazon Private ECR
#  id: login-ecr
#  uses: aws-actions/amazon-ecr-login@v1
#---------------------------------------
