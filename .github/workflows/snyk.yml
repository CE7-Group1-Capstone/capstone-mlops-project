name: Snyk Package Vulnerabilities Scan

on:
  #pull_request:
  #  branches: [ "main" ]
  #  paths:
  #      - '*.py'
  #      - '**/*.py'
  workflow_dispatch:

jobs:
  pre-deploy:
    runs-on: ubuntu-latest
    steps:
      - run: echo "This job is automatically triggered by a ${{ github.event_name }} event."

  install-dependencies:
    runs-on: ubuntu-latest
    needs: [pre-deploy]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Run installation of dependencies commands
        run: npm install

  python-code-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Run Snyk (Python) Code Scan
        run: snyk code test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true
  
  terraform-iac-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Run Snyk Terraform Scan 
        run: snyk iac test --report --scan=resource-changes --severity-threshold=high # this covers high and critical
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

  open-source-code-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12" # Specify the required Python version
      - name: Create Python ML venv
        run: | 
          python3 -m venv venv
          echo "PATH=$(pwd)/venv/bin:$PATH" >> $GITHUB_ENV
      - name: Install packages and dependencies
        run: | # inclusive of dvc[s3] install
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Snyk Open-Source Code Scan
        run: snyk test --severity-threshold=high # this covers high and critical
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

  terraform-create:
    needs: [python-code-scan,terraform-iac-scan,open-source-code-scan]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform init
        run: terraform init

      - name: Terraform fmt
        run: terraform fmt

      - name: Terraform plan
        run: terraform plan 

      - name: Terraform apply
        run: terraform apply -auto-approve

  terraform-wait:
    needs: terraform-create
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
      - name: Pause 2min to verify lambda creation and test
        run: sleep 120
    
  terraform-destroy:
    needs: terraform-wait
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
      - uses: actions/checkout@v2
          
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
   
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          
      - name: Terraform init
        run: terraform init
    
      - name: Terraform destroy
        run: terraform destroy -auto-approve
