# To promote the latest app image tested in nonprod env 
# to the prod env in the common registry

name: Promote Tested App Image

on:
  pull_request:
    branches:
      - main
    paths:
      - 'main.py'
      - 'config.yml'
      - 'steps/*.py'
      - 'requirements.txt'
      - 'app.py'
      - 'dockerfile'
      - 'models/*.pkl.dvc'
      - 'data/*.csv.dvc'
      - 'trigger_test.py' # meant to trigger-test this workflow
  workflow_dispatch:
    inputs:
      confirm:
        description: "Do you really want to proceed with promoting the latest 'predict_buy_app' fron nonprod to prod? (y/n)?"
        required: true
        default: 'n'
        type: choice
        options:
          - 'y'
          - 'n'

jobs:
  Pre-Deploy:
    runs-on: ubuntu-latest
    steps:
      - run: echo "This job is automatically triggered by a ${{ github.event_name }} event."
  
  Nonprod-to-Prod-Promotion:
    name: Promote Docker App Image
    runs-on: ubuntu-latest
    environment: nonprod
    needs: [Pre-Deploy]
    if: ${{ github.event_name == 'workflow_dispatch' &&  github.event.inputs.confirm == 'y' }} || ${{ github.event.pull_request.merged }}

    steps:
      - name: Conditional check to promote only if DVC exists
        run: |
          if ! [ -f "models/*.pkl.dvc" && -f "data/*.csv.dvc" ]; then
            echo "DVC does not exists so no promotion required."
            exit 78
          fi

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Ensure full repo is cloned

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
    
      - name: Pull and Push latest app image from nonprod to prod
        id: pull-push-image
        env:
          NONPROD_REPO: ${{ vars.NONPROD_IMAGE_NAME }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          SRC_ECR_REG: ${{ steps.login-ecr.outputs.registry }}
          SRC_ECR_REPO: ${{ vars.NONPROD_IMAGE_NAME }}
          DST_ECR_REG: ${{ steps.login-ecr.outputs.registry }}
          DST_ECR_REPO: ${{ vars.PROD_IMAGE_NAME }}
        run: | # First retrieve the ver no of the latest app image in the nonprod repo
          LATEST_VER=$(aws ecr describe-images --repository ${{ env.NONPROD_REPO }} \
            --region ${{ env.AWS_REGION }} \
            --query "sort_by(imageDetails, &imagePushedAt)[-1].imageTags" --output text | \
            grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+-[A-Z]{3}\.[0-9]+')
          docker pull ${{ env.SRC_ECR_REG }}/${{ env.SRC_ECR_REPO }}:latest
          docker tag ${{ env.SRC_ECR_REG }}/${{ env.SRC_ECR_REPO }}:latest \
            ${{ env.DST_ECR_REG }}/${{ env.DST_ECR_REPO }}:latest
          docker tag ${{ env.SRC_ECR_REG }}/${{ env.SRC_ECR_REPO }}:latest \
            ${{ env.DST_ECR_REG }}/${{ env.DST_ECR_REPO }}:$LATEST_VER
          aws ecr batch-delete-image --repository ${{ env.DST_ECR_REPO }} \
            --image-ids imageTag=latest 2>/dev/null
          docker push \
            ${{ env.DST_ECR_REG }}/${{ env.DST_ECR_REPO }} --all-tags
          echo "REG_IMAGE_NAME=${{ env.DST_ECR_REG }}/${{ env.DST_ECR_REPO }}:$LATEST_VER" >> $GITHUB_OUTPUT         

      - name: Display Image Name
        run: |
          echo "Promoted app image: ${{ steps.pull-push-image.outputs.REG_IMAGE_NAME }}"
