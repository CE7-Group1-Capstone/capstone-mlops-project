# This workflow will build and push a new container image to Amazon ECR:
name: Build Docker App Image

on:
# Not used currently but kept for future reference only.
# Trigger condition 1: After completion of train_model workflow 
# which builds a newly trained ML model, it also auto-generates 
# a merge pr on develop branch which then triggers this workflow. 
#  pull_request:
#    types:
#      - closed
#    branches:
#      - develop
#    paths:
#      - 'models/*.pkl.dvc'
#
# Trigger condition 2: In case of having to run 
# build_app without train_model having ran.
# In cases wherein the 'app.py', 'dockerfile' and 
# 'requirements.txt' have changed but the ML model pkl file
# did not change, so the FastAPI app Docker image needs
# to be rebuilt and pushed into ECR.
# Note that the dummy 'trigger_test.txt' can be added or 
# modified to trigger this workflow for testing purpose.
  workflow_dispatch:
    inputs:
      confirm:
        description: "Do you really want to proceed? (y/n)?"
        required: true
        default: 'n'
        type: choice
        options:
          - 'y'
          - 'n'
# Trigger condition 3: Whenver train_model runs successfully, 
# it calls build_app to run too.
# This is no longer used, kept for furture reference only.
#  workflow_call:
#    inputs:
#      skip_confirmation:
#        required: true
#        type: string
# Trigger condition 4: This runs on the same 'feature*'' branch
# as 'Train ML Model' workflow.
  workflow_run:
    workflows: ["Train ML Model"]
    types:
      - completed
    branches:
      - feature*

permissions: write-all

jobs:
  Pre-Deploy:
    runs-on: ubuntu-latest
    steps:
      - run: echo "This job is automatically triggered by a ${{ github.event_name }} event."

  Build-and-Push:
    # Build the trained model into FastAPI Docker Image and Push Image to nonprod registry
    name: Build and Push
    runs-on: ubuntu-latest
    environment: nonprod
    needs: [Pre-Deploy]
    if: ${{ github.event_name == 'workflow_dispatch' &&  github.event.inputs.confirm == 'y' }} || ${{ github.event.workflow_run.conclusion == 'success' }}
  #
  # This pull_request event trigger conditional check is no longer in use now but kept for future reference only.
  #     ${{ github.event.pull_request.merged }}
  #

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Ensure full repo is cloned

      # Prepare the working environment
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12" # Specify the required Python version
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Install DVC
        run: pip install dvc[all]
      - name: Configure Git
        run: |
          git config --global user.name ${{ vars.GIT_USERNAME }}
          git config --global user.email ${{ vars.GIT_USEREMAIL }}

      # Only pull from DVC the last-commited ML model if 
      # there is no model already exisiting locally in the event
      # of 'workflow_dispatch' trigger - manual workkflow case
      - name: Pull from DVC
        run: |
          if [[ ! -d .dvc ]]; then
            echo "DVC is not initialised, .dvc directory does not exists"
            exit 1
          fi
          if [[ -f "models/model.pkl.dvc" && -f "models/model.pkl" ]]; then
            echo "A ML Model is already existing in the 'models' sub-directory!" 
          elif [[ -f "models/model.pkl" ]]; then
            echo "A ML Model is already existing in the 'models' sub-directory!"
          else
            git fetch origin
            git status
            dvc doctor
            dvc pull models/model.pkl
          fi

      # Get the latest tag
      - name: Fetch all tags to get the latest
        id: get_latest_tag
        run: |
          git fetch --tags
          echo "LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)" >> "$GITHUB_OUTPUT"
          echo "LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)"
      - name: Display latest tag
        run: echo "The latest tag is ${{ steps.get_latest_tag.outputs.LATEST_TAG }}"

      # Build the Docker image
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build Docker image
        id: build-image
        env:
          REG_NAME: ${{ steps.login-ecr.outputs.registry }}
          VER_TAG: ${{ steps.get_latest_tag.outputs.LATEST_TAG }}
        run: | # This 1st WS cmd runs in quiet mode to rmove latest tag
          aws ecr batch-delete-image --repository ${{ vars.NONPROD_IMAGE_NAME }} --image-ids imageTag=latest 2>/dev/null
          docker build -t ${{ vars.NONPROD_IMAGE_NAME }}:${{ env.VER_TAG }} -t ${{ vars.NONPROD_IMAGE_NAME }}:latest .
          docker tag ${{ vars.NONPROD_IMAGE_NAME }}:${{ env.VER_TAG }} \
            ${{ env.REG_NAME }}/${{ vars.NONPROD_IMAGE_NAME }}:${{ env.VER_TAG }}
          docker tag ${{ vars.NONPROD_IMAGE_NAME }}:latest \
            ${{ env.REG_NAME }}/${{ vars.NONPROD_IMAGE_NAME }}:latest

      # Snyk scan the Docker image
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Run Snyk Container Scan 
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk container test ${{ vars.NONPROD_IMAGE_NAME }}:latest --severity-threshold=critical --file=./dockerfile
          snyk container test ${{ vars.NONPROD_IMAGE_NAME }}:latest --severity-threshold=critical --file=./dockerfile --json > snyk_container_report.json
        continue-on-error: true
      - name: Upload Snyk Container Report
        uses: actions/upload-artifact@v4.3.0
        with:
          name: snyk-container-report
          path: snyk_container_report.json

      # Push the Docker image
      - name: Push image to ECR
        id: push-image
        env:
          REG_NAME: ${{ steps.login-ecr.outputs.registry }}
          VER_TAG: ${{ steps.get_latest_tag.outputs.LATEST_TAG }}
        run: |
          docker push ${{ env.REG_NAME }}/${{ vars.NONPROD_IMAGE_NAME }} --all-tags
